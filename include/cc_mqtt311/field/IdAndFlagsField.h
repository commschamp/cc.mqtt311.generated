// Generated by commsdsl2comms v7.0.3

/// @file
/// @brief Contains definition of <b>"ID + Flags"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_mqtt311/field/FieldBase.h"
#include "cc_mqtt311/field/IdAndFlagsFieldCommon.h"
#include "cc_mqtt311/field/MsgId.h"
#include "cc_mqtt311/options/DefaultOptions.h"
#include "comms/field/Bitfield.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_mqtt311
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref IdAndFlagsField field.
/// @tparam TOpt Protocol options.
template <typename TOpt = cc_mqtt311::options::DefaultOptions>
struct IdAndFlagsFieldMembers
{
    /// @brief Definition of <b>"Flags"</b> field.
    class Flags : public
        comms::field::IntValue<
            cc_mqtt311::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName,
            comms::option::def::FixedBitLength<4U>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_mqtt311::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<4U>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_mqtt311::field::IdAndFlagsFieldMembersCommon::FlagsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt311::field::IdAndFlagsFieldMembersCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"Id"</b> field.
    class Id : public
        cc_mqtt311::field::MsgId<
            TOpt,
            comms::option::def::HasName,
            comms::option::def::FixedBitLength<4U>
        >
    {
        using Base =
            cc_mqtt311::field::MsgId<
                TOpt,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<4U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt311::field::IdAndFlagsFieldMembersCommon::IdCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Flags,
           Id
        >;
};

/// @brief Definition of <b>"ID + Flags"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_mqtt311::options::DefaultOptions, typename... TExtraOpts>
class IdAndFlagsField : public
    comms::field::Bitfield<
        cc_mqtt311::field::FieldBase<>,
        typename IdAndFlagsFieldMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasName,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Bitfield<
            cc_mqtt311::field::FieldBase<>,
            typename IdAndFlagsFieldMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasName,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bitfield class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
    ///         for cc_mqtt311::field::IdAndFlagsFieldMembers::Flags member field.
    ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
    ///         for cc_mqtt311::field::IdAndFlagsFieldMembers::Id member field.
    COMMS_FIELD_MEMBERS_NAMES(
        flags,
        id
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_mqtt311::field::IdAndFlagsFieldCommon::name();
    }

    typename Field_id::ValueType getValue() const
    {
        return field_id().getValue();
    }

    template <typename T>
    void setValue(T&& val)
    {
        field_id().setValue(std::forward<T>(val));
    }
};

} // namespace field

} // namespace cc_mqtt311
