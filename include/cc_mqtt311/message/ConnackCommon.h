// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_mqtt311::message::Connack message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace cc_mqtt311
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_mqtt311::message::Connack message.
/// @see cc_mqtt311::message::ConnackFields
struct ConnackFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_mqtt311::message::ConnackFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_mqtt311::message::ConnackFields::Flags field.
        static const char* name()
        {
            return "Flags";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_mqtt311::message::ConnackFields::Flags field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "Session Present"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt311::message::ConnackFields::ReturnCode field.
    struct ReturnCodeCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_mqtt311::message::ConnackFields::ReturnCode field.
        enum class ValueType : std::uint8_t
        {
            Accepted = 0, ///< value @b Accepted. 
            BadProtocolVersion = 1, ///< value <b>Bad Protocol Version</b>. 
            IdentifierRejected = 2, ///< value <b>Identifier Rejected</b>. 
            ServerUnavailable = 3, ///< value <b>Server Unavailable</b>. 
            BadAuth = 4, ///< value <b>Bad Auth Details</b>. 
            NotAuthorized = 5, ///< value <b>Not Authorized</b>. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 5, ///< Last defined value.
            ValuesLimit = 6, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_mqtt311::message::ConnackFields::ReturnCode field.
        static const char* name()
        {
            return "Return Code";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Accepted",
                "Bad Protocol Version",
                "Identifier Rejected",
                "Server Unavailable",
                "Bad Auth Details",
                "Not Authorized"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_mqtt311::message::ConnackFields::ReturnCode field.
    using ReturnCodeVal = ReturnCodeCommon::ValueType;
};

/// @brief Common types and functions of 
///     @ref cc_mqtt311::message::Connack message.
struct ConnackCommon
{
    /// @brief Name of the @ref cc_mqtt311::message::Connack message.
    static const char* name()
    {
        return "CONNACK";
    }
};

} // namespace message

} // namespace cc_mqtt311
