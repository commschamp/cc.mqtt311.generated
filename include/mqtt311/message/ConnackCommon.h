// Generated by commsdsl2comms v3.6.4

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref mqtt311::message::Connack message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>

namespace mqtt311
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref mqtt311::message::Connack message.
/// @see mqtt311::message::ConnackFields
struct ConnackFieldsCommon
{
    /// @brief Common functions for
    ///     @ref mqtt311::message::ConnackFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref mqtt311::message::ConnackFields::Flags field.
        static const char* name()
        {
            return "Flags";
        }
        
        /// @brief Retrieve name of the bit of
        ///     @ref mqtt311::message::ConnackFields::Flags field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "Session Present"
            };
        
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }
        
            return Map[idx];
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref mqtt311::message::ConnackFields::ReturnCode field.
    struct ReturnCodeCommon
    {
        /// @brief Values enumerator for
        ///     @ref mqtt311::message::ConnackFields::ReturnCode field.
        enum class ValueType : std::uint8_t
        {
            Accepted = 0, ///< value @b Accepted.
            BadProtocolVersion = 1, ///< value <b>Bad Protocol Version</b>.
            IdentifierRejected = 2, ///< value <b>Identifier Rejected</b>.
            ServerUnavailable = 3, ///< value <b>Server Unavailable</b>.
            BadAuth = 4, ///< value <b>Bad Auth Details</b>.
            NotAuthorized = 5, ///< value <b>Not Authorized</b>.
            
            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 5, ///< Last defined value.
            ValuesLimit = 6, ///< Upper limit for defined values.
            
        };
        
        /// @brief Name of the @ref mqtt311::message::ConnackFields::ReturnCode field.
        static const char* name()
        {
            return "Return Code";
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            static const char* Map[] = {
                "Accepted",
                "Bad Protocol Version",
                "Identifier Rejected",
                "Server Unavailable",
                "Bad Auth Details",
                "Not Authorized"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            
            if (MapSize <= static_cast<std::size_t>(val)) {
                return nullptr;
            }
            
            return Map[static_cast<std::size_t>(val)];
        }
        
    };
    
    /// @brief Values enumerator for
    ///     @ref mqtt311::message::ConnackFields::ReturnCode field.
    using ReturnCodeVal = ReturnCodeCommon::ValueType;
    
};

/// @brief Common types and functions of 
///     @ref mqtt311::message::Connack message.
/// @see mqtt311::message::Connack
struct ConnackCommon
{
    /// @brief Name of the @ref mqtt311::message::Connack message.
    static const char* name()
    {
        return "CONNACK";
    }
    
};

} // namespace message

} // namespace mqtt311


