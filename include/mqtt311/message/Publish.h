// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"PUBLISH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Optional.h"
#include "comms/options.h"
#include "mqtt311/MsgId.h"
#include "mqtt311/field/FieldBase.h"
#include "mqtt311/field/PacketId.h"
#include "mqtt311/field/Topic.h"
#include "mqtt311/message/PublishCommon.h"
#include "mqtt311/options/DefaultOptions.h"

namespace mqtt311
{

namespace message
{

/// @brief Fields of @ref Publish.
/// @tparam TOpt Extra options
/// @see @ref Publish
/// @headerfile "mqtt311/message/Publish.h"
template <typename TOpt = mqtt311::options::DefaultOptions>
struct PublishFields
{
    /// @brief Definition of <b>"Topic"</b> field.
    using Topic =
        mqtt311::field::Topic<
            TOpt
        >;
    
    /// @brief Definition of <b>"Packet ID"</b> field.
    struct PacketId : public
        comms::field::Optional<
            mqtt311::field::PacketId<TOpt>,
            comms::option::def::MissingByDefault
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt311::message::PublishFieldsCommon::PacketIdCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"Payload"</b> field.
    struct Payload : public
        comms::field::ArrayList<
            mqtt311::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::PublishFields::Payload
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt311::message::PublishFieldsCommon::PayloadCommon::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Topic,
        PacketId,
        Payload
    >;
};

/// @brief Definition of <b>"PUBLISH"</b> message class.
/// @details
///     See @ref PublishFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "mqtt311/message/Publish.h"
template <typename TMsgBase, typename TOpt = mqtt311::options::DefaultOptions>
class Publish : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<mqtt311::MsgId_Publish>,
        comms::option::def::FieldsImpl<typename PublishFields<TOpt>::All>,
        comms::option::def::MsgType<Publish<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<mqtt311::MsgId_Publish>,
            comms::option::def::FieldsImpl<typename PublishFields<TOpt>::All>,
            comms::option::def::MsgType<Publish<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_topic index, @b Field_topic type and @b field_topic() access fuction
    ///         for @ref PublishFields::Topic field.
    ///     @li @b FieldIdx_packetId index, @b Field_packetId type and @b field_packetId() access fuction
    ///         for @ref PublishFields::PacketId field.
    ///     @li @b FieldIdx_payload index, @b Field_payload type and @b field_payload() access fuction
    ///         for @ref PublishFields::Payload field.
    COMMS_MSG_FIELDS_NAMES(
        topic,
        packetId,
        payload
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 2U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return mqtt311::message::PublishCommon::name();
    }
    
    /// @brief Custom read functionality
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        refresh_packetId(); // make sure the mode of "packet ID" is correct
        return Base::doRead(iter, len);
    }
    
    /// @brief Custom refresh functionality
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        return refresh_packetId() || updated;
    }
    
    
private:
    bool refresh_packetId()
    {
        auto& qosField = Base::transportField_flags().field_qos();
        using QosFieldType = typename std::decay<decltype(qosField)>::type;
        using QosValueType = typename QosFieldType::ValueType;
        
        auto mode = comms::field::OptionalMode::Missing;
        if (QosValueType::AtMostOnceDelivery < qosField.value()) {
            mode = comms::field::OptionalMode::Exists;
        }
        
        if (field_packetId().getMode() == mode) {
            return false;
        }
        
        field_packetId().setMode(mode);
        return true;
    }
    
};

} // namespace message

} // namespace mqtt311


